* Liste des articles et cours lus pendant le stage et résumé de ce que j'y ai appris

** 1 - Cours d'introduction à la cryptographie de L3 - Adeline Roux Langlois (voir documents persos) 
- notion de sécurité CPA (l'attaquant, en regardant un chiffré, ne peut pas recuperer d'information non négligeable sur le message d'origine)
- notion de sécurité CCA (l'attaquant, en pouvant décoder des messages autre que le challenge, ne peut pas savoir d'informations non négligeable sur le message d'origine)
- gaussienne discrète sur Z et le fait que les valeurs sont presque toutes de norme faible (pour une gaussienne de paramètre s, autour de s*sqrt(n) )
- découverte du problème LWE calculatoire et décisionnel (on a m produits scalaires avec un vecteur secret s de Z^n, les produits sont brouillés par une gaussienne discrete)
- découverte d'un chiffrement reposant sur LWE ( en recevant (A,b) en clé publique, on échantillonne r avec des valeurs 0 ou 1 puis on renvoie (r^TA,r^Tb+floor(q/2)*M) )
- énoncé du Leftover Hash Lemma (si une matrice et un vecteur sont choisis de manière uniforme, leur produit est a distance négligeable de la distribution uniforme)
- notion de résistance aux collisions (un adversaire ne peut pas renvoyer une collision pour la fonction de hash avec une proba non négligeable )
- découverte du problème SIS ( pour une matrice a coefficients entier, trouver un vecteur petit de \Lambda_T (A) )
- découverte d'une fonction de hachage reposant sur SIS ( x est le message a coefficients dans 0 et 1 (donc court), la fonction renvoie Ax mod q )
- découverte des schémas de signature ( schémas qui permettent de prouver l'identité d'une personne, la clé secrète encrypte et celle publique décrypte)

** 2 - Cours d'introduction à la cryptographie sur les réseaux euclidiens - Adeline Roux Langlois (voir documents persos)
- notions de base sur un réseau euclidien ( bases, premier minimum, dernier minimum, théorèmes de minkowski )
- introduction aux problèmes SVP, CVP et à leur variantes approchées ( étant donné une base d'un réseau, trouver le vecteur non nul le plus petit du réseau ou le plus proche d'un point donné)
- search SVP et decisional SVP ( Avec search SVP, decisional SVP est résolu très facilement. Avec decisional SVP, on fait une recherche dichotomique entre ||B|| et 0 pour trouver la distance entre le point et le réseau, puis on utilise decisional SVP pour savoir dans quel sous réseau le vecteur se trouve. Une fois qu'on a un sous réseau exponentiellement plus dilaté que celui de base, on peut appliquer un algorithme poly qui trouve le vecteur le plus proche avec une facteur d'approximation exponentiel)
- il existe une réduction de GapSVP à GapCVP (on appelle GapCVP sur les réseau B_i où ou a multiplié par deux le vecteur b_i et pour cible b_i. Si on a une instance NON, les instances de GapCVP aussi. Si on a une instance OUI, on a un vecteur v tq ||v+b_i-b_i||<=r et v+b_i est dans B_i donc on a une instance OUI de GapCVP )
- Complexité de GapSVP (GapCVP_\gamma est NP dur pour \gamma constant, NP \cap coNP pour \gamma = sqrt(n), et difficile pour \gamma = poly(n). Pour \gamma = 2^O(n), il y a un algo poly)
- introduction au réseau dual ( l'ens des point formant un pdt scalaire entier avec les pt du réseau )
- inégalité plus générale sur les gaussiennes (pour une gaussienne de paramètre s, proba que le vecteur soit >= s*t est inférieur à exp(-\pi*t^2) )
- introduction du smoothing parameter (qui permet d'avoir certaines ptés de la gaussienne discrète sur la gaussienne continue)
- pour un paramètre suffisamment grand, la gaussienne modulo un sous réseau est indistinguable de la proba uniforme modulo le sous réseau.
- On peut échantillonner la gaussienne discrète sur un réseau donné ( pourvu que s soit assez grand ) (voir papier n°3)
- découverte du problème SIVP (étant donné un réseau trouver n vecteurs cours indépendants)
- il existe une réduction de SIVP à SIS ( on échantillonne n vecteurs de la gaussienne que l'on transforme en problème SIS; puisque les vecteurs échantillonnés sont courts, on obtient un vecteur qui est toujours sur le réseau mais plus petit, on répète ça pour obtenir un ensemble de vecteur linéairement indépendants puis on réitère la procédure jusqu'à avoir un des vecteurs suffisamment petits)
- search LWE et decisional LWE sont équivalents ( pour résoudre search en ayant decisional, on devine chaque coordonnée une à une; si on tombe sur la bonne, on a une distribution de LWE, sinon on a une distribution uniforme )
- il existe une réduction quantique de GapSVP à LWE ( voir présentation n°4 )
- découverte du chiffrement dual Regev (au lieu que la clé privée est r (coef dans 0 et 1) et la clé publique est y =r^TA  mod q (donc la clé secrète n'est plus s) 
- définition d'une trappe pour les problèmes de réseau (base courte de \Lambda_q^\bot(A), avec laquelle on peut résoudre beaucoup de problèmes compliqués facilement et échantillonner la gaussienne avec un paramètre petit ) (voir papier n°3)
- il est possible de générer une trappe en même temps qu'une matrice, et de faire en sorte que la matrice soit proche de l'uniforme
- découverte du schéma de signature GPV, dont la sécurité repose sur SIS ( utiliser une trappe pour générer un vecteur avec une certaine propriété (compliqué à faire sans la trappe), pour vérifier, on a juste à vérifier si le vecteur respecte la bonne pté )
- on peut construire des réseaux avec des coefs dans un anneau de polynôme (typiquement, Z[X]/(X**n+1) ) pour avoir des multiplication un peu plus efficace. Malheureusement, certains problèmes standards sur les réseaux n'ont pas été prouvés comme durs ( voir présentation n°6)

** 3 - How to Use a Short Basis: Trapdoors for Hard Lattices and New Cryptographic Constructions - Gentry, Peikert et Vaikuntanathan ( https://eprint.iacr.org/2007/432.pdf )
L'article présente un moyen efficace échantillonner la gaussienne discrète sur n'importe quel réseau, et utilise le fait qu'on puisse générer une matrice uniforme et une trappe (voir cours n°2) pour construire plusieurs primitives cryptographiques dont un IBE et un système de chiffrement reposant sur LWE et pouvant posséder des clés "messy".
- découverte de la notion d'IBE ( un système où une clé publique permet d'encrypter un message pour tout le monde, et une clé secrète  "maitresse" permet de générer une clé secrète pour chaque utilisateur )
- l'article explique comment échantillonner la gaussienne discrète sur $\mathbb{Z}$ ( en sachant qu'avec une proba de type 1-negl, l’échantillon est dans [c-s*\omega(sqrt(log(n))),c+\omega(sqrt(log(n)))], on peut appliquer une méthode de rejet sur cet intervalle pour obtenir un échantillon gaussien)
- à l'aide de cette gaussienne, on peut échantillonner celle sur un réseau quelconque ( il s'agit d'une méthode utilisant les vecteurs de Gramm-Schmitt de la base )
- formules entre \Lambda et \Lambda_\bot (vues en TD du cours n° 2)
- on retrouve dans l'article la fonction de hachage présentée dans le cours n°1
- on retrouve le chiffrement dual Regev
- présentation d'un IBE basé sur le chiffrement dual Regev utilisant à la fois les trappes et échantillonnage sur une gaussienne discrète ( la clé publique est A, ca clé privée est une trappe, pour générer une clé privée pour une identité id, on prend un vecteur u=H(id) et on trouve un vecteur e tq Ae = u mod q et tel que e est court, ce qui ets possible car on peut générer la gaussienne de \Lambda_\bot grâce à la trappe)
- présentation d'un système de chiffrement dont la sécurité repose sur LWE ( clé secrète : s uniforme, clé publique : p = A^Ts+x ou x est gaussien, pour encrypter, on choisi e gaussien de Z^m et on retourne (Ae,p^Te+M*floor(q/2)) )
- définition de clés "messy" (clés pour lesquelles les chiffrés sont indistinguables de vecteurs choisis uniformément )
- présentation d'un algorithme permettant d’identifier si une clé est "messy" avec une probabilité exponentiellement faible pour l'algorithme basé sur LWE
- La réduction de SIVP à SIS du cours n°2 est présentée de manière plus détaillée en fin d'article ( comme une bonne partie des algorithmes présentés, cette réduction utilise l'algorithme échantillonnage de la gaussienne sur les réseaux)

** 4 - Proving Hardness of LWE - Regev ( présentation d'article en vidéo : https://www.youtube.com/watch?v=Z4DM3qhH6pA et https://people.csail.mit.edu/vinodv/6892-Fall2013/regev.pdf )
J'ai regardé la vidéo et j'ai lu l'intro de l'article. Dans sa présentation, Regev détaille un algorithme ayant acces à un oracle de LWE pour trouver un vecteur cours d'un réseau (et donc cela permet de résoudre des problèmes classiques de réseaux, par exemple SVP ).
- découverte du problème BDD, quiselon Regev n'a de l'utilité qu'en info quantique ( étant un vecteur "proche" d'un point du réseau, trouver le point du réseau le plus proche )
- l'algo présenté repose sur la proposition suivante : avec un échantillon de taille poly(n) de vecteurs échantillonnés sur une gausienne de parametre r, je peux échantillonner un autre échantillon de même taille de parametre r/2 à l'aide de LWE. Pour réaliser ca, Regev présente 2 lemmes.
- lemme 2: étant donné un oracle qui résout BDD_d, je peux sampler la gaussienne de parametre sqrt(n)/d ( vu que c'est quantique, je comprend pas tres bien, mais l'idée est de calculer la fonction f_{d/srqt(n)} (celle qui fait des gausiennes sur les points du dual) de manière quantique, en elevant un état qui nous gene en "décalculant" les points du dual avec BDD, et ensuite on fait une transformée de fourier pour trouver la distribution gausienne de parametre sqrt(n)/d)
- lemme 1: étant donné un oracle qui résout LWE et des echantillons gaussiens du réseau de parametre r, je peux résoudre $BDD_{p/r}$ (l'idée est que à l'aide de f_{p/r}, on peut faire une descente de gradient et trouver le point le plus proche en remontant la colline formée par la gausienne. Pour p=1, il s'agit juste d'un calcul d'esperance et f_{1/r} est trouvable facilement.

** 5 - The Mathematics of Latices - Vaikuntanathan ( https://www.youtube.com/watch?v=LlPXfy6bKIY et https://www.youtube.com/watch?v=SZkTJMorxnM ) 

** 6 - Présentation sur Ring-LWE - Lyubashevsky ( https://www.youtube.com/watch?v=okJwRM0Yu7E )

** 7 - Lattice-based Cryptography - Micciancio et Regev ( https://cseweb.ucsd.edu/~daniele/papers/PostQuantum.pdf )

** 8 - Robustness of the Learning with Errors Assumption - Goldwasser, Kalai, Peikert et Vaikuntanathan ( https://web.eecs.umich.edu/~cpeikert/pubs/robustlwe.pdf )
